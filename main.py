"""Написати програму:
1. Повинні існувати кілька видів собак = сіба-іну, мопс, такса, плюшевий лабрадор,
гумова такса з пищалкою.
2. Собаки повинні вміти видавати звуки (гавкати, пищати) і полювати. При цьому
варто пам'ятати, що мопсу полюватиме лінь, деякі іграшки не видають звуків і
точно не зможуть полювати.
3. Ми можемо написати команду виду "mops sound" та отримати у відповідь "woof!
woof!", далі за аналогією. Як реалізується консольний інтерфейс, значення не
має."""


class Dog:
    def __init__(self, breed):
        self.breed = breed


class ShibaInu(Dog):
    def sound(self):
        return "woof! woof!"

    def hunt(self):
        return "hunting..."


class Pug(Dog):
    def sound(self):
        return "woof! woof!"

    def hunt(self):
        return "lazy to hunt..."


class Dachshund(Dog):
    def sound(self):
        return "woof! woof!"

    def hunt(self):
        return "hunting..."


class PlushLabrador(Dog):
    def sound(self):
        return "no sound"

    def hunt(self):
        return "cannot hunt..."


class RubberDachshund(Dog):
    def sound(self):
        return "squeak!"

    def hunt(self):
        return "cannot hunt..."


def main():
    dogs = [
        ShibaInu("ShibaInu"),
        Pug("Pug"),
        Dachshund("Dachshund"),
        PlushLabrador("PlushLabrador"),
        RubberDachshund("RubberDachshund")
    ]
    for dog in dogs:
        print(dog.breed)

    command = input("Введіть через пробіл породу собаки та команду (dog sound/hunt): ")
    dog_breed, action = command.split()

    for dog in dogs:
        if dog.breed.lower() == dog_breed.lower():
            if action == "sound":
                print(dog.sound())
            elif action == "hunt":
                print(dog.hunt())
            else:
                print("Невірна команда")
            break

    else:
        print("Такої породи не існує")


if __name__ == "__main__":
    main()
"""
Питання: 
1 Як працюють індекси у БД?  
2 Які є JOIN в MySQL? 
3 Що таке dependency inversion? 
4 У чому різниця між GET та POST запитом? 
5 У чому різниця дзвінка self і static? 
6 Яка різниця між MVP та MVC? 
7 Яка різниця між == та ===? 
8 Що таке final class та final method?

1. Індекси у базі даних використовуються для прискорення пошуку та фільтрації даних. Вони створюються на певних стовпцях таблиці, 
що дозволяє ефективно здійснювати пошук за значенням цих стовпців.
2. У MySQL є декілька типів JOIN:
   - INNER JOIN: повертає рядки, які мають збіги у з'єднуваних таблицях.
   - LEFT JOIN: повертає всі рядки з лівої таблиці та відповідні збіги з правою таблицею.
   - RIGHT JOIN: повертає всі рядки з правої таблиці та відповідні збіги з лівою таблицею.
   - FULL JOIN: повертає всі рядки з обох таблиць, незалежно від збігу.
3. Dependency inversion (принцип інверсії залежностей) є одним з принципів проектування програмного забезпечення, 
де високорівневі модулі не повинні залежати від низькорівневих модулів, а обидва типи модулів повинні залежати від абстракцій. 
Це допомагає забезпечити більшу гнучкість, розширюваність та тестованість системи.
4. Різниця між GET та POST запитами полягає в тому, як дані передаються з клієнта до сервера. GET запит передає дані через 
URL-параметри, які видно в адресній стрічці браузера, тоді як POST запит передає дані у тілі запиту, як приховані дані. 
GET запити використовуються для отримання даних, тоді як POST запити використовуються для надсилання даних на сервер для обробки.
5. Ключове слово self використовується для посилання на поточний екземпляр класу всередині його методів. 
Використовується для доступу до атрибутів та методів екземпляра класу. З іншого боку, ключове слово static використовується 
для оголошення статичних методів, які не мають доступу до атрибутів або методів.
6. MVP (Model-View-Presenter) та MVC (Model-View-Controller) є архітектурними шаблонами для розробки програмного забезпечення. 
Основна різниця між ними полягає в тому, як взаємодіють компоненти моделі, представлення (вигляду) та управління даними. 
У MVP модель не залежить від представлення, але вона взаємодіє з презентером, який відповідає за обробку логіки та оновлення представлення. 
У MVC модель може напряму взаємодіяти з контролером, що обробляє логіку та оновлює представлення.
7. Оператор == використовується для порівняння на рівність: 1 == "1" буде True, оператор === порівнює на ідентичність: 1 === "1" False.
8. Ключове слово final використовується для позначення того, що клас не може бути успадкований (final class) або метод не може 
бути перевизначений у підкласі (final method). Клас або метод, позначений як final, не можна змінювати або перевизначати в подальшому.

"""
